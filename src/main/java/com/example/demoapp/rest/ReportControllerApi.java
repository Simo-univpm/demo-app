/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demoapp.rest;

import org.springframework.format.annotation.DateTimeFormat;

import java.sql.Timestamp;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-20T13:18:15.490530100+01:00[Europe/Rome]")
@Validated
@Tag(name = "report-controller", description = "the report-controller API")
public interface ReportControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/report : Write a csv file with the number of performed operations between the specified timestamps. If the file already exists, subsequent operations will be appended
     * The api also returns the number of performed operations
     *
     * @param startDate  (required)
     * @param endDate  (required)
     * @param key  (required)
     * @return if the csv file cannot be opened (status code 400)
     *         or if the csv file is written correctly (status code 200)
     */
    @Operation(
        operationId = "writeReport",
        summary = "Write a csv file with the number of performed operations between the specified timestamps. If the file already exists, subsequent operations will be appended",
        description = "The api also returns the number of performed operations",
        tags = { "report-controller" },
        responses = {
            @ApiResponse(responseCode = "400", description = "if the csv file cannot be opened", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = Long.class))
            }),
            @ApiResponse(responseCode = "200", description = "if the csv file is written correctly", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = Long.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/report",
        produces = { "application/hal+json" }
    )
    default ResponseEntity<Long> writeReport(
        @NotNull @Parameter(name = "startDate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) Timestamp startDate,
        @NotNull @Parameter(name = "endDate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) Timestamp endDate,
        @NotNull @Parameter(name = "key", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = true) String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/report/verbose : Write a csv file with the performed operations between the specified timestamps. If the file already exists, subsequent operations will be appended
     *
     * @param startDate  (required)
     * @param endDate  (required)
     * @param key  (required)
     * @return if the csv file cannot be opened (status code 400)
     *         or if the csv file is written correctly (status code 200)
     */
    @Operation(
        operationId = "writeReportVerbose",
        summary = "Write a csv file with the performed operations between the specified timestamps. If the file already exists, subsequent operations will be appended",
        tags = { "report-controller" },
        responses = {
            @ApiResponse(responseCode = "400", description = "if the csv file cannot be opened"),
            @ApiResponse(responseCode = "200", description = "if the csv file is written correctly")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/report/verbose"
    )
    default ResponseEntity<Void> writeReportVerbose(
        @NotNull @Parameter(name = "startDate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) Timestamp startDate,
        @NotNull @Parameter(name = "endDate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) Timestamp endDate,
        @NotNull @Parameter(name = "key", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = true) String key
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
