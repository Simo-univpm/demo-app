/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demoapp.rest;

import com.example.demoapp.model.entities.UserEntity;
import com.example.demoapp.model.rest.LoginRequest;
import com.example.demoapp.model.rest.RegistrationRequest;
import com.example.demoapp.model.rest.UserEditRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import jakarta.validation.Valid;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-20T13:18:15.490530100+01:00[Europe/Rome]")
@Validated
@Tag(name = "user-controller", description = "the user-controller API")
public interface UserControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/user/{id} : Deletes the user with the id provided in the id path variable
     *
     * @param id  (required)
     * @return if the user we want to delete is not registered (status code 404)
     *         or if the user is successfully deleted (status code 200)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Deletes the user with the id provided in the id path variable",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "if the user we want to delete is not registered"),
            @ApiResponse(responseCode = "200", description = "if the user is successfully deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/user/{id}"
    )
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/user : Edit the first_name and last_name fields of the user with the username specified in the body
     *
     * @param userEditRequest  (required)
     * @return if the user we want to edit is not registered (status code 404)
     *         or if the specified user is registered and gets correctly edited (status code 200)
     */
    @Operation(
        operationId = "editUser",
        summary = "Edit the first_name and last_name fields of the user with the username specified in the body",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "if the user we want to edit is not registered", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = UserEditRequest.class))
            }),
            @ApiResponse(responseCode = "200", description = "if the specified user is registered and gets correctly edited", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = UserEditRequest.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/user",
        produces = { "application/hal+json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserEditRequest> editUser(
        @Parameter(name = "UserEditRequest", description = "", required = true) @Valid @RequestBody UserEditRequest userEditRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/hal+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/hal+json";
                    ApiUtil.setExampleResponse(request, "application/hal+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/user/{id} : Return the details of the user specified in the id path variable
     *
     * @param id  (required)
     * @return if the user we want to view is not registered (status code 404)
     *         or a list of strings with the data of the requested user (status code 200)
     */
    @Operation(
        operationId = "getUserDetails",
        summary = "Return the details of the user specified in the id path variable",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "if the user we want to view is not registered", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = UserEntity.class))
            }),
            @ApiResponse(responseCode = "200", description = "a list of strings with the data of the requested user", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = UserEntity.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/{id}",
        produces = { "application/hal+json" }
    )
    default ResponseEntity<UserEntity> getUserDetails(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/hal+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/hal+json";
                    ApiUtil.setExampleResponse(request, "application/hal+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/user/login : Perform log-in with an existing user
     *
     * @param loginRequest  (required)
     * @return if the user we want to log-in is not registered (status code 404)
     *         or if the user gets successfully logged in (status code 200)
     *         or if the specified user&#39;s credentials does not satisfy the application&#39;s criteria (status code 400)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Perform log-in with an existing user",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "if the user we want to log-in is not registered"),
            @ApiResponse(responseCode = "200", description = "if the user gets successfully logged in"),
            @ApiResponse(responseCode = "400", description = "if the specified user's credentials does not satisfy the application's criteria")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/login",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> loginUser(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/user/register : Register a new user
     *
     * @param registrationRequest  (required)
     * @return if there is already an user with that specific username (status code 400)
     *         or if user gets successfully registered (status code 200)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Register a new user",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "400", description = "if there is already an user with that specific username", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = UserEntity.class))
            }),
            @ApiResponse(responseCode = "200", description = "if user gets successfully registered", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = UserEntity.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/register",
        produces = { "application/hal+json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserEntity> registerUser(
        @Parameter(name = "RegistrationRequest", description = "", required = true) @Valid @RequestBody RegistrationRequest registrationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/hal+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/hal+json";
                    ApiUtil.setExampleResponse(request, "application/hal+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
