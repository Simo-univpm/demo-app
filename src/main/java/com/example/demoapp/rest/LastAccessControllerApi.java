/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demoapp.rest;
import com.example.demoapp.model.entities.LastAccessEntity;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-20T13:18:15.490530100+01:00[Europe/Rome]")
@Validated
@Tag(name = "last-access-controller", description = "the last-access-controller API")
public interface LastAccessControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/access/{id} : Returns date and time of user&#39;s last access to the server
     *
     * @param id  (required)
     * @return if user&#39;s last access is returned successfully (status code 200)
     *         or if user registered but never logged in (status code 400)
     */
    @Operation(
        operationId = "getUserLastAccess",
        summary = "Returns date and time of user's last access to the server",
        tags = { "last-access-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "if user's last access is returned successfully", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = LastAccessEntity.class))
            }),
            @ApiResponse(responseCode = "400", description = "if user registered but never logged in", content = {
                @Content(mediaType = "application/hal+json", schema = @Schema(implementation = LastAccessEntity.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/access/{id}",
        produces = { "application/hal+json" }
    )
    default ResponseEntity<LastAccessEntity> getUserLastAccess(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/hal+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/hal+json";
                    ApiUtil.setExampleResponse(request, "application/hal+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
