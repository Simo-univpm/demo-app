openapi: 3.0.1
info:
  title: API demo-app
  description: "Documentazione delle API RESTful esposte dal mio progetto demo svolto\
    \ in Accenture. <br>Queste ruotano attorno ad un utente e ci permettono di registrare,\
    \ loggare, editare <br>un utente e di visualizzarne i dati.<br>Inoltre ci permettono\
    \ di ottenere la data dell' ultimo accesso dell'utente e di generare <br>dei report\
    \ in formato csv riguardanti le varie operazioni effettuate sul server. <br>"
  contact:
    name: Simone Francalancia
    url: https://github.com/Simo-univpm/demo-app
    email: simone.francalancia@accenture.com
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/user:
    put:
      tags:
      - user-controller
      summary: Edit the first_name and last_name fields of the user with the username
        specified in the body
      operationId: editUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEditRequest'
        required: true
      responses:
        "404":
          description: if the user we want to edit is not registered
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UserEditRequest'
        "200":
          description: if the specified user is registered and gets correctly edited
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UserEditRequest'
  /api/user/register:
    post:
      tags:
      - user-controller
      summary: Register a new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      responses:
        "400":
          description: if there is already an user with that specific username
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        "200":
          description: if user gets successfully registered
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UserEntity'
  /api/user/login:
    post:
      tags:
      - user-controller
      summary: Perform log-in with an existing user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "404":
          description: if the user we want to log-in is not registered
        "200":
          description: if the user gets successfully logged in
        "400":
          description: if the specified user's credentials does not satisfy the application's
            criteria
  /api/report:
    post:
      tags:
      - report-controller
      summary: "Write a csv file with the number of performed operations between the\
        \ specified timestamps. If the file already exists, subsequent operations\
        \ will be appended"
      description: The api also returns the number of performed operations
      operationId: writeReport
      parameters:
      - name: startDate
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: endDate
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: key
        in: query
        required: true
        schema:
          type: string
      responses:
        "400":
          description: if the csv file cannot be opened
          content:
            application/hal+json:
              schema:
                type: integer
                format: int64
        "200":
          description: if the csv file is written correctly
          content:
            application/hal+json:
              schema:
                type: integer
                format: int64
  /api/report/verbose:
    post:
      tags:
      - report-controller
      summary: "Write a csv file with the performed operations between the specified\
        \ timestamps. If the file already exists, subsequent operations will be appended"
      operationId: writeReportVerbose
      parameters:
      - name: startDate
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: endDate
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: key
        in: query
        required: true
        schema:
          type: string
      responses:
        "400":
          description: if the csv file cannot be opened
        "200":
          description: if the csv file is written correctly
  /api/user/{id}:
    get:
      tags:
      - user-controller
      summary: Return the details of the user specified in the id path variable
      operationId: getUserDetails
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: if the user we want to view is not registered
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        "200":
          description: a list of strings with the data of the requested user
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UserEntity'
    delete:
      tags:
      - user-controller
      summary: Deletes the user with the id provided in the id path variable
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: if the user we want to delete is not registered
        "200":
          description: if the user is successfully deleted
  /api/access/{id}:
    get:
      tags:
      - last-access-controller
      summary: Returns date and time of user's last access to the server
      operationId: getUserLastAccess
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: if user's last access is returned successfully
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/LastAccessEntity'
        "400":
          description: if user registered but never logged in
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/LastAccessEntity'
components:
  schemas:
    LastAccessEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        last_access:
          type: string
          format: date-time
    UserEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        passwd:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    UserEditRequest:
      required:
      - first_name
      - last_name
      - username
      type: object
      properties:
        username:
          maxLength: 20
          minLength: 1
          type: string
        first_name:
          maxLength: 20
          minLength: 1
          type: string
        last_name:
          maxLength: 20
          minLength: 1
          type: string
    RegistrationRequest:
      required:
      - first_name
      - last_name
      - passwd
      - username
      type: object
      properties:
        username:
          maxLength: 20
          minLength: 1
          type: string
        passwd:
          maxLength: 20
          minLength: 8
          type: string
        first_name:
          maxLength: 20
          minLength: 1
          type: string
        last_name:
          maxLength: 20
          minLength: 1
          type: string
    LoginRequest:
      required:
      - passwd
      - username
      type: object
      properties:
        username:
          maxLength: 20
          minLength: 1
          type: string
        passwd:
          maxLength: 20
          minLength: 8
          type: string
